
s() {
  git status -sb "$@"
  return 0
}

alias d='gd $argv'

alias ga='git add -A'
alias gap='ga -p'
alias gau='git add -u'
alias gbr='git branch -v'
alias gc!='git commit -v'
gc() {
  git diff --cached | grep '\btap[ph]\b' >/dev/null &&
    echo "\e[0;31;29mOops, there's a #tapp or similar in that diff.\e[0m" ||
    git commit -v "$@"
}
gca() {
  (git diff; git diff --cached) | grep '\btap[ph]\b' >/dev/null &&
    echo "\e[0;31;29mOops, there's a #tapp or similar in that diff.\e[0m" ||
    git commit -v -a "$@"
}
alias gcam='gca --amend'
alias gcdeploy='gc --allow-empty -m "Deploy"'
alias gch='git cherry-pick'
alias gclean='git remote prune origin; git gc'
alias gcm='git commit -v --amend'
alias gcm!='git commit -v --amend --no-edit'
alias gco='git checkout'
alias gcop='gco -p'
gd() {
  git diff --color -M "$@" | diff-so-fancy | less --tabs=4 -RFX
}
gdc() {
  git diff  --cached --color -M "$@" | diff-so-fancy | less --tabs=4 -RFX
}
alias gdo='gd origin/$(git_current_branch)..'
alias gf='git fetch'
alias gg='git grep'
git-new() {
  [ -d "$1" ] || mkdir "$1" &&
  cd "$1" &&
  git init &&
  touch .gitignore &&
  git add .gitignore &&
  git commit -m "Add .gitignore."
}
git_current_branch() {
  cat "$(git rev-parse --git-dir 2>/dev/null)/HEAD" | sed -e 's/^.*refs\/heads\///'
}
alias glog='git log --date-order --pretty="format:%C(yellow)%h%Cblue%d%Creset %s %C(dim white) %an, %ar%Creset"'
alias gl='glog --graph'
alias gla='gl --all'
alias glo='gl origin/$(git_current_branch)..'
alias glr='glog --reverse'
gls() {
  query="$1"
  shift
  glog --pickaxe-regex "-S$query" "$@"
}
alias gm='git merge --no-ff'
alias gmf='git merge --ff-only'
alias gmfthis='gmf origin/$(git_current_branch)'
alias gp='git push'
alias gpghpages='export PREVIOUS_BRANCH=$(git_current_branch) ; gco -B gh-pages ; gpthis -f ; gco $PREVIOUS_BRANCH; gbr -D gh-pages'
alias gpstaging='export PREVIOUS_BRANCH=$(git_current_branch) ; gco staging ; gm $PREVIOUS_BRANCH ; gpthis ; gco $PREVIOUS_BRANCH'
alias gpqa='export PREVIOUS_BRANCH=$(git_current_branch) ; gco qa ; gm $PREVIOUS_BRANCH ; gpthis ; gco $PREVIOUS_BRANCH'
alias gpforce='gpthis --force-with-lease'
alias gpthis='gp origin $(git_current_branch)'
alias gpthis!='gp --set-upstream origin $(git_current_branch)'
alias gr='git reset'
alias grb='git rebase -p'
alias grba='git rebase --abort'
alias grbmain='gco main ; gup ; gco - ; grb main'
alias grbthis='grb origin/$(git_current_branch)'
alias grbc='git rebase --continue'
alias grbi='git rebase -i'
alias grh='git reset --hard'
alias grl='git reflog'
alias grp='gr --patch'
alias grsh='git reset --soft HEAD~'
alias grv='git remote -v'
glog-merges() {
  git --git-dir=.git log --pretty="* %B" --first-parent --merges $@
}
glog-merges-since() {
  glog-merges --since="$@"
}
gs() {
  git show --color "$@" | diff-so-fancy | less --tabs=4 -RFX
}
alias gst='git stash'
alias gstp='git stash pop'
alias gup='git pull --rebase'
alias gupthis='export PREVIOUS_BRANCH=$(git_current_branch) ; gco main ; gup ; gbr -d $PREVIOUS_BRANCH'
